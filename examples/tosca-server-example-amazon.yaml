tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - provider_tool/providers/common/TOSCA_provider_definition_1_0.yaml
  - provider_tool/providers/amazon/TOSCA_amazon_definition_1_0.yaml

topology_template:
  node_templates:
    tosca_server_example_group:
      properties:
        description: tosca_server_example_group
        name: tosca_server_example_group
        rules:
        - cidr_ip: 0.0.0.0
          ports:
          - 22
          proto: tcp
        - cidr_ip: 0.0.0.0
        rules_egress:
        - cidr_ip: 0.0.0.0
      type: amazon.nodes.Group
    tosca_server_example_instance:
      interfaces:
        Standard:
          create:
            implementation: add_host.yaml
            inputs:
              ansible_user: cirros
              group: tosca_server_example_instance_public_address
              host_ip: '{{ host_ip | default([]) + [[ "tosca_server_example_public_address_"
                + item, tosca_server_example_instance.results[item | int - 1].instances[0].public_ip_address
                ]] }}'
      properties:
        name: tosca_server_example
        network:
          assign_public_ip: true
        tags:
          metadata: cube_master=true
      requirements:
      - key_name:
          node: tosca_server_example_key
      - vpc_subnet_id:
          node_filter:
            properties:
            - id: not_found
      - instance_type:
          node_filter:
            properties:
            - vcpus: 1
            - storage: 10.0
            - memory: 1.0
      - security_groups: tosca_server_example_group
      - image_id:
          node_filter:
            properties:
            - image_id: not_found
      type: amazon.nodes.Instance
    tosca_server_example_key:
      properties:
        key_material: '{{ lookup(''file'', ''~/.ssh/id_rsa.pub'') }}'
        name: tosca_server_example_key
      type: amazon.nodes.Key
